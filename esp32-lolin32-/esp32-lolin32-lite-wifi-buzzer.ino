/**************************************************************************************************
 *
 * ESP-32 Lolin32 Lite Remote for Photobooth -> https://photoboothproject.github.io/
 * Telegram -> https://t.me/PhotoboothGroup
 *
 *
 * Unter Benutzereinstellung WLAN-SSID, WLAN-PW, IP-Fotobox, IP-Router und IP-ESP eintragen/anpassen.
 *
 * Anschlüsse ESP:  5 - Collage-Taste
 *                 17 - Foto-Taste
 *                 18 - Druck-Taste
 *                 19 - SDA-Display
 *                 23 - SDC-Display
 *                 34 - Spannungsteiler (3x10kOhm Wiederstände zw. Masse und + am Akku, bei 2/3 abgreifen)
 *
 *
 * Lademodus starten: beim Wlan-Verbindungsaufbau die "Druck-Taste" betätigen
 * Lademodus benden:  "Foto-Taste" betätigen -> reset , oder auschalten
 *
**************************************************************************************************/

#include <SPI.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include <WiFi.h>
#include <esp_sleep.h>       

//
// Start Benutzereinstellungen
//
const char* ssid = "!!!FotoBox!!!";      // WLAN-Name des Routers der Fotobox
const char* password = "diefotobox";     // Passwort des WLAN's 
char HOST_NAME[] = "192.168.15.10";      // Remote-Buzzer-Server-IP (IP Fotobox-PC)

IPAddress staticIP(192, 168, 15, 17);  // IP des Buzzer-ESP
IPAddress gateway(192, 168, 15, 1);    // IP Router
IPAddress subnet(255, 255, 255, 0);    // Subnet-Maske
IPAddress dns(192, 168, 15, 1);        // IP Router
//
// Ende Benutzereinstellungen
//

#define SCREEN_WIDTH 128     // OLED display width, in pixels
#define SCREEN_HEIGHT 64     // OLED display height, in pixels
#define OLED_RESET -1        // Reset pin # (or -1 if sharing Arduino reset pin)
#define SCREEN_ADDRESS 0x3C  // < See datasheet for Address; 0x3D for 128x64, 0x3C for 128x32
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);

// ===== Define GPIO Pins as Macros =====
#define PHOTO_BUTTON   17  // Pin for photo button
#define COLLAGE_BUTTON 5   // Pin for collage button
#define PRINT_BUTTON   18  // Pin for print button
#define LED_PIN        22  // LED for connection feedback
#define VOLTAGE_SENSOR 34  // Voltage sensor pin (for battery measurement)

float vbat = 0;      //
int batProz = 0;
int val = 0;      // variable to store the value read
int korrF = 250;  // Korrekturfaktor in mV (orginal 110, ggf. anpassen damit bei vollem Akku ca 100% angezeigt wird)
int lademodus = 0;
int I2C_SCL = 23;                    // I2C Pins SCL-23 / SDA-19
int I2C_SDA = 19;                    // I2C Pins SCL-23 / SDA-19
int pausezeit = 1000;                // Dauer für LED zur Tastenbestätigung
long myTimer = 0;                    // Timer für Delay zwischen zwei Batteriemessungen in ms
long myInterval = 20000;             // Delay zwischen zwei Batteriemessungen in ms
int HTTP_PORT = 14711;               // PORT für GET Request
String HTTP_METHOD = "GET";          // or "POST"
String PATH_NAME = "";               // String PATH_NAME   = "/commands/start-picture";

String WLANStatus[7];  // Array für WLAN-Status Codes
// LED Blink-Werte
int anz = 5;
int speed = 100;

// Logo Photobooth-Bitmap
const unsigned char Photobooth [] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xf0, 0x00, 0x00, 0x7f, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xc0, 0x00, 0x00, 0x1f, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x07, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x7f, 0xe0, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0xc0, 0x18, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x01, 0x82, 0x0c, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x02, 0x3f, 0xe2, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x06, 0x60, 0x33, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x0c, 0xc0, 0x11, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x09, 0x80, 0x00, 0x80, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x09, 0x00, 0x04, 0x80, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x19, 0x00, 0x04, 0xc0, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x13, 0x00, 0x06, 0xc0, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x12, 0x00, 0x06, 0xc0, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x13, 0x00, 0x06, 0xc0, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x1b, 0x00, 0x04, 0xc0, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x19, 0x00, 0x04, 0x80, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x09, 0x80, 0x0c, 0x80, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x0c, 0xc0, 0x19, 0x80, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x04, 0x60, 0x33, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x02, 0x3f, 0xe2, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x03, 0x07, 0x0c, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0xc0, 0x18, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x7d, 0xf0, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x0f, 0x80, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x19, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x07, 0x82, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x0f, 0xe2, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x01, 0x04, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x08, 0x32, 0x00, 0x00, 0x20, 0x00, 0x20, 0x00, 0x00, 0x01, 0x04, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x08, 0x12, 0x00, 0x00, 0x20, 0x00, 0x20, 0x00, 0x00, 0x01, 0x04, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x08, 0x12, 0x00, 0x00, 0x20, 0x00, 0x20, 0x00, 0x00, 0x01, 0x04, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x08, 0x12, 0x00, 0x00, 0x20, 0x00, 0x20, 0x00, 0x00, 0x01, 0x04, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x08, 0x12, 0xf0, 0x3c, 0x3c, 0x7c, 0x2f, 0x07, 0x81, 0xe1, 0xe5, 0xe0, 0x00, 0x00, 
	0x00, 0x00, 0x08, 0x33, 0x08, 0x42, 0x20, 0xc6, 0x31, 0x88, 0x42, 0x31, 0x06, 0x30, 0x00, 0x00, 
	0x00, 0x00, 0x0f, 0xe3, 0x04, 0xc1, 0x20, 0x82, 0x20, 0x98, 0x24, 0x11, 0x04, 0x10, 0x00, 0x00, 
	0x00, 0x00, 0x08, 0x02, 0x04, 0x81, 0x20, 0x82, 0x20, 0x90, 0x24, 0x19, 0x04, 0x18, 0x00, 0x00, 
	0x00, 0x00, 0x08, 0x02, 0x04, 0x81, 0x20, 0x82, 0x20, 0x90, 0x24, 0x09, 0x04, 0x18, 0x00, 0x00, 
	0x00, 0x00, 0x08, 0x02, 0x04, 0x81, 0x20, 0x82, 0x20, 0x90, 0x24, 0x09, 0x04, 0x18, 0x00, 0x00, 
	0x00, 0x00, 0x08, 0x02, 0x04, 0x81, 0x20, 0x82, 0x20, 0x90, 0x24, 0x19, 0x04, 0x18, 0x00, 0x00, 
	0x00, 0x00, 0x08, 0x02, 0x04, 0xc3, 0x20, 0x82, 0x20, 0x88, 0x66, 0x11, 0x04, 0x18, 0x00, 0x00, 
	0x00, 0x00, 0x08, 0x02, 0x04, 0x66, 0x10, 0x44, 0x31, 0x0c, 0xc2, 0x31, 0x84, 0x18, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x0c, 0x38, 0x0e, 0x03, 0x81, 0xc0, 0x60, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};


void (*resetFunc)(void) = 0;  // create a reset-function

void battStatus() {
  for (int i = 0; i <= 99; i++) {  // Integration über 100 Werte, jeweils 10ms Abstand
    val = val + analogRead(VOLTAGE_SENSOR);
    delay(10);
  }
  val = val / 100;
  vbat = map(val, 0, 4095, 0, 3300);        // DAC Counts umrechnen in mV
  vbat = vbat / 2 * 3;                      // SPannungsteiler 2/3
  vbat = vbat + korrF;                      // Korrekturfaktor hunzufügen
  batProz = map(vbat, 3300, 4180, 0, 100);  // 0...100% Grenzspannungen festlegen (in mV)  3,1v bis 4,18

  vbat = vbat / 1000.00;  // Spannung in V umrechnen, mit Kommastellen

  display.clearDisplay();               // Display-Speicher löschen
  display.setTextSize(1);               // Normal 1:1 pixel scale
  display.setTextColor(SSD1306_WHITE);  // Draw white text
  display.setCursor(0, 0);              // Start mittig, erste Zeile
  display.println(F("Fotobox-Fernbedienung"));
  display.setCursor(0, 8);  // Cursor mittig, zweite Zeile
  display.print("Akku: ");  // Ausgabe Akkuspannung in V
  display.print(vbat, 2);
  display.print(" V ");
  display.print("ca.");
  display.print(batProz);  // Ausgabe Akkuspannung in geschätzten Prozent
  display.print("%");
  display.println("");

  if (lademodus == 1) {
    display.println("Lademodus mit Foto");
    display.println("beenden! => RESET");
  }

  display.drawRect(0, 50, 127, 10, SSD1306_WHITE);  // Ladebalken Rahmen
  display.fillRect(0, 50, map(batProz, 0, 100, 0, 127), 10, SSD1306_WHITE); // ausfüllen des Ladebalken
  display.display();
}

void runChargingMode() {
  while (digitalRead(PHOTO_BUTTON) == HIGH) {  // Schleife, bis PHOTO gedrückt wird
    lademodus = 1;
    battStatus();
    delay(100);
  }
  display.println("Lademodus beendet!");
  display.display();
  delay(5000);
  display.clearDisplay();
  display.setCursor(0, 0);
  display.display();
  resetFunc();
}

void ledflash(int anz, int speed) {  // LED blinken lassen, wie oft, wie schnell
  for (int i = 0; i <= anz - 1; i++) {
    digitalWrite(LED_PIN, 1);
    delay(speed);
    digitalWrite(LED_PIN, 0);
    delay(speed);
  }
}

void connect_wifi() {
  WLANStatus[0] = "WLAN idle";
  WLANStatus[1] = "No WLAN available";
  WLANStatus[2] = "WLAN scan completed";
  WLANStatus[3] = "WLAN connected";
  WLANStatus[4] = "WLAN connect failed";
  WLANStatus[5] = "WLAN connection lost";
  WLANStatus[6] = "WLAN disconnected";
  delay(10);
  // We start by connecting to a WiFi network
  Serial.println();
  Serial.print("WLAN: ");
  display.print("WLAN: ");
  Serial.println(ssid);
  display.print(ssid);
  display.display();

  // this WLAN Module

  if (WiFi.config(staticIP, gateway, subnet, dns, dns) == false) {
    Serial.println("Configuration failed.");
    display.print("Config failed.");
    display.display();
  }

  WiFi.begin(ssid, password);

  while (WiFi.status() != WL_CONNECTED && digitalRead(PRINT_BUTTON) == HIGH) {
    ledflash(10, 50);  //LED blinkt, solange WLAN noch nicht verbunden
    // delay(250);
    Serial.print(".");
    //display.clearDisplay();
    //display.setTextSize(1);             // Normal 1:1 pixel scale
    //display.setTextColor(SSD1306_WHITE);        // Draw white text
    display.print(".");
    display.display();
  }
  if (digitalRead(PRINT_BUTTON) == LOW) {  // LADE-Modus bei gedrücktem PRINT-Taster während WLAN Connects
    Serial.println("PRINT-Taster wurde gedrückt, starte Lademodus ohne WIFI");
    runChargingMode();
  }

  display.println("");
  display.println("WiFi connected");
  display.print("IP: ");
  display.println(WiFi.localIP());
  display.display();
  digitalWrite(ledPin, 0);
}

void SendGETrequest(String PATH_NAME) {  // GET-Request senden an Fotobox-Server
  WiFiClient client;
  if (client.connect(HOST_NAME, HTTP_PORT)) {
    display.setCursor(9, 16);
    display.print("gestartet");
    //display.print(HOST_NAME);
    //display.print(" via Port: ");
    //display.println(HTTP_PORT);
    display.display();
    ledflash(2, 500);
  } else {
    display.setTextSize(1);
    display.println("Verbindungsfehler");
    display.display();
    ledflash(10, 50);
  }
  // send HTTP request header
  client.println(HTTP_METHOD + " " + PATH_NAME + " HTTP/1.1");
  client.println("Host: " + String(HOST_NAME));
  client.println("Connection: close");
  client.println();  // end HTTP request header
  // Kontrollausgabe via Serial
  //display.setTextSize(1);
  display.setCursor(4, 32);
  display.println("Verbindung");
  display.setCursor(22, 48);
  display.println("beendet");
  display.display();
  delay(5000);
  battStatus();  // Batteriestatus anzeigen
}

void setup() {
  Serial.begin(115200);            // Terminal-Ausgabe starten
  pinMode(LED_PIN, OUTPUT);         //
  pinMode(PHOTO_BUTTON, INPUT_PULLUP);    // Input-Pin für Foto-Taster mit Pull-Up, Taster nach Masse
  pinMode(COLLAGE_BUTTON, INPUT_PULLUP);  // Input-Pin für Collage-Taster mit Pull-Up, Taster nach Masse
  pinMode(PRINT_BUTTON, INPUT_PULLUP);    // Input-Pin für Print-Taster mit Pull-Up, Taster nach Masse
  delay(100);

  Wire.begin(I2C_SDA, I2C_SCL);  // I2C Display starten

  // SSD1306_SWITCHCAPVCC = generate display voltage from 3.3V internally
  if (!display.begin(SSD1306_SWITCHCAPVCC, SCREEN_ADDRESS)) {
    Serial.println(F("SSD1306 allocation failed"));
    for (;;)
      ;  // Don't proceed, loop forever
  }

//Photobooth Logo Aanfang
  display.clearDisplay();               // Display-Speicher löschen
  
  // Draw the bitmap:
  // drawBitmap(x position, y position, bitmap data, bitmap width, bitmap height, color)
  display.drawBitmap(0, 0, Photobooth, 128, 64, WHITE);
  
  // Update the display
  display.display();
  delay(5000);                          // Pause in ms
//Photobooth Logo Ende

  display.setTextColor(SSD1306_WHITE);  // Draw white text
  display.clearDisplay();
  display.display();
  // delay(2000);
  battStatus();  // Batteriestatus anzeigen
}

void loop() {  // L O O P

  // WIFI checken
  if (WiFi.status() != WL_CONNECTED) {           // wenn WIFI nicht verbunden... connecten
    display.println(WLANStatus[WiFi.status()]);  // gibt den aktuellen WLAN-Staus aus
    display.display();
    connect_wifi();  // WLAN Verbindung aktivieren
  }

  if (digitalRead(PHOTO_BUTTON) == LOW)  // wenn Foto-TAster gedrückt
  {
    display.clearDisplay();
    display.setTextSize(2);               // Normal 1:1 pixel scale
    display.setTextColor(SSD1306_WHITE);  // Draw white text
    display.setCursor(34, 0);
    display.println("FOTO");
    display.display();
    PATH_NAME = "/commands/start-picture";
    SendGETrequest(PATH_NAME);  // GET Request senden
  }

  if (digitalRead(COLLAGE_BUTTON) == LOW) {
    display.clearDisplay();
    display.setTextSize(2);               // Normal 1:1 pixel scale
    display.setTextColor(SSD1306_WHITE);  // Draw white text
    display.setCursor(22, 0);
    display.println("COLLAGE");
    display.display();
    PATH_NAME = "/commands/start-collage";
    SendGETrequest(PATH_NAME);  // GET Request senden
  }

  if (digitalRead(PRINT_BUTTON) == LOW) {
    display.clearDisplay();
    display.setTextSize(2);               // Normal 1:1 pixel scale
    display.setTextColor(SSD1306_WHITE);  // Draw white text
    display.setCursor(34, 0);
    display.println("DRUCKEN");
    display.display();
    PATH_NAME = "/commands/start-print";
    SendGETrequest(PATH_NAME);  // GET Request senden
  }

  if (millis() > myTimer + myInterval) {
    myTimer = millis();
    battStatus();
  }
}
